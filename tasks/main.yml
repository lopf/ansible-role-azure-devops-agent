- name: Set agent config facts
  set_fact:
    agent_cmd_args:
      - "./config.sh"
      - "--unattended"
      - "--acceptteeeula"
      - "--agent '{{ az_devops_agent_name }}'"
      - "--url '{{ az_devops_server_url }}'"
      - "--work _work"
      - "--auth PAT"
      - "--token '{{ az_devops_accesstoken }}'"
      - "--runasservice"
    build_agent_cmd_args:
      - "--pool '{{ az_devops_agent_pool_name }}'"
    deployment_agent_cmd_args:
      - "--deploymentgroup"
      - "--deploymentgroupname '{{ az_devops_deployment_group_name }}'"
      - "--addDeploymentGroupTags"
      - "--deploymentGroupTags '{{ az_devops_deployment_group_tags }}'"
      - "--projectname '{{ az_devops_project_name }}'"

- name: Gather OS specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}-{{ ansible_distribution_major_version}}.yml"
    - "{{ ansible_distribution }}.yml"
    - default.yml
  tags: vars

- name: Install requirements
  package:
    name: "{{ item }}"
    state: present
  loop: "{{ az_devops_agent_packages }}"
  register: result
  until: result is succeeded

- name: Add a agent user
  user:
    name: "{{ az_devops_agent_user }}"
    comment: "Azure DevOps Agent"
    shell: /bin/bash

- name: Create directories
  file:
    state: directory
    path: "{{ item }}"
    owner: "{{ az_devops_agent_user }}"
    group: "{{ az_devops_agent_user }}"
    mode: 0755
  loop:
    - "{{ az_devops_agent_folder }}"
    - "{{ az_devops_work_folder }}"

- name: Download and unarchive
  unarchive:
    src: "{{ az_devops_agent_package_url }}"
    dest: "{{ az_devops_agent_folder }}"
    remote_src: yes
    owner: "{{ az_devops_agent_user }}"
    group: "{{ az_devops_agent_user }}"
    creates: "{{ az_devops_agent_folder }}/config.sh"

- name: Register agent service status
  shell: ./svc.sh status | grep -q \(running\)
  args:
    chdir: "{{ az_devops_agent_folder }}"
  changed_when: false
  failed_when: service_running.rc not in [0,1]
  register: service_running

- name: Uninstall agent service
  command: ./svc.sh uninstall
  args:
    chdir: "{{ az_devops_agent_folder }}"
    removes: "{{ az_devops_agent_folder }}/runsvc.sh"
  when: service_running.rc == 0

- name: Unconfigure agent
  command: "./config.sh remove --auth PAT --token {{ az_devops_accesstoken }}"
  args:
    chdir: "{{ az_devops_agent_folder }}"
    removes: "{{ az_devops_agent_folder }}/.agent"
  become: true
  become_user: "{{ az_devops_agent_user }}"
  when: service_running.rc == 0

- name: Add '--replace' configuration argument
  set_fact:
    build_agent_cmd_args: "{{ build_agent_cmd_args }} + ['--replace']"
    deployment_agent_cmd_args: "{{ build_agent_cmd_args }} + ['--replace']"
  when: az_devops_agent_replace_existing

- name: Configure agent as build server
  command: "{{ (agent_cmd_args + build_agent_cmd_args) | join(' ') }}"
  args:
    chdir: "{{ az_devops_agent_folder }}"
    creates: "{{ az_devops_agent_folder }}/.agent"
  become: true
  become_user: "{{ az_devops_agent_user }}"
  when:
    - az_devops_agent_role == 'build'

- name: Configure agent as deployment server
  command: "{{ (agent_cmd_args + deployment_agent_cmd_args) | join(' ') }}"
  args:
    chdir: "{{ az_devops_agent_folder }}"
    creates: "{{ az_devops_agent_folder }}/.agent"
  become: true
  become_user: "{{ az_devops_agent_user }}"
  when:
    - az_devops_agent_role == 'deployment'

- name: Install agent service
  command: ./svc.sh install {{ az_devops_agent_user }}
  become: true
  args:
    chdir: "{{ az_devops_agent_folder }}"

- name: Start agent service
  command: ./svc.sh start
  become: true
  args:
    chdir: "{{ az_devops_agent_folder }}"
